'''
项目: MFPPC
作者: NKid
描述: "MFpp's Pretty Prefect, Clever!"的缩写，开玩笑的。
真描述: "Minecraft Function Plus Plus Compiler"的缩写。

項目: MFPPC
作者: NKid
描述: "MFpp's Pretty Prefect, Clever!"的縮寫，開玩笑的。
真描述: "Minecraft Function Plus Plus Compiler"的縮寫。

Project: MFPPC
Author: NKid
Description: The abbreviation of "MFpp's Pretty Prefect, Clever!", just kidding.
True Description: The abbreviation of "Minecraft Function Plus Plus Compiler".
'''

import os
import sys
import getopt

from lang import *

version = '0.1'


o = '.'

project = 'a'

files = {}


class MFPPSyntaxError(Exception):
    def __init__(self, syntax, line):
        err = 'SyntaxError: %s: %s' % (syntax, line)
        super().__init__(err)
        self.syntax = syntax
        self.line = line
        self.err = err


def count_tabs(line):
    if line == '':
        return 0
    c_count = 0
    while True:
        if line[c_count] != ' ':
            break
        c_count += 1
    if c_count % 4 != 0:
        return -1
    else:
        return c_count / 4


def pc_loop(s, tabs, ln, label):
    lines = s.splitlines(False)
    if ln - 1 >= len(lines):
        return '', ln
    if count_tabs(lines[ln - 1]) != tabs:
        raise MFPPSyntaxError('', ln)
    r = ''
    while True:
        if ln - 1 >= len(lines):
            return r, ln
        line = lines[ln - 1]
        if count_tabs(line) == -1:
            raise MFPPSyntaxError(w['inc_tab'], ln)
        elif count_tabs(line) != tabs:
            if count_tabs(line) < tabs:
                return r, ln
            else:  # count_tabs(lines[l]) > tabs:
                raise MFPPSyntaxError(w['inc_tab'], ln)
        line = line[tabs * 4:]
        if line.startswith('if'):
            if not line.startswith('if '):
                raise MFPPSyntaxError(w['inc_if_con_:'], ln)
            if line[-1] != ':':
                raise MFPPSyntaxError(w['inc_if_:'], ln)
            condition = line[3:-1]
            if condition == '':
                raise MFPPSyntaxError(w['inc_if_con'], ln)
            ln += 1
            result, ln = pc_loop(s, tabs + 1, ln, label + 1)
            if result == '':
                raise MFPPSyntaxError(w['inc_tab'], ln)
            r += 'unless_goto L%d %s\n%s\n:L%d\n' %\
                (label, condition, result, label)
        elif line.startswith('unless'):
            if not line.startswith('unless '):
                raise MFPPSyntaxError(w['inc_unless_con_:'], ln)
            if line[-1] != ':':
                raise MFPPSyntaxError(w['inc_unless_:'], ln)
            condition = line[7:-1]
            if condition == '':
                raise MFPPSyntaxError(w['inc_unless_con'], ln)
            ln += 1
            result, ln = pc_loop(s, tabs + 1, ln, label + 1)
            if result == '':
                raise MFPPSyntaxError(w['inc_tab'], ln)
            r += 'if_goto L%d %s\n%s\n:L%d\n' %\
                (label, condition, result, label)
        elif line.startswith('while'):
            if not line.startswith('while '):
                raise MFPPSyntaxError(w['inc_while_con_:'], ln)
            if line[-1] != ':':
                raise MFPPSyntaxError(w['inc_while_:'], ln)
            condition = line[6:-1]
            if condition == '':
                raise MFPPSyntaxError(w['inc_while_con'], ln)
            ln += 1
            result, ln = pc_loop(s, tabs + 1, ln, label + 2)
            if result == '':
                raise MFPPSyntaxError(w['inc_tab'], ln)
            r += ':L%d\nunless_goto L%d %s\n%s\n:L%d\n' %\
                (label, label + 1, condition, result, label + 1)
        else:
            r += line + '\n'
            ln += 1


def create(name):
    files[name] = ''


def output(s, name):
    if name not in files.keys():
        create(name)
    files[name] += s


def remove_empty_line(s):
    s = '\n%s\n' % s
    while '\n\n' in s:
        s = s.replace('\n\n', '\n')
    return s


def flush():
    try:
        os.mkdir('%s/%s' % (o, project))
    except OSError as e:
        if e.errno != 17:  # Means cannot make a folder.
            raise e
    for name in files:
        files[name] = '# ---------------------------------------------------' \
                      '-->\n' \
                      '# > Generated by MFPP v%s by NKid\n' \
                      '# > Filename: %s.mcfuntion\n' \
                      '# > Please use Minecraft v1.13+ to run' \
                      ' main.mcfunction\n' \
                      '# ---------------------------------------------------' \
                      '-->\n' \
                      % (version, name) + remove_empty_line(files[name])
        with open('%s/%s/%s.mcfunction' % (o, project, name), 'w') as f:
            f.write(files[name])


def clear_newline(s):
    cn = s.count('\n')
    cr = s.count('\r')
    crn = s.count('\r\n')
    if cn == cr == crn == 0:  # None
        r = s
    elif cr == cn == crn:  # Windows
        r = s.replace('\r', '')
    elif cn > 0 and cr == crn == 0:  # Unix (Like)
        r = s
    elif cr > 0 and cn == crn == 0:  # Mac
        r = s.replace('\r', '\n')
    else:  # Error
        r = s.replace('\r', '\n')
    r = remove_empty_line(r)
    return r


def _compile(s, only_precompile=False):
    print(wr['p'], end='')
    r = pc_loop(s, 0, 1, 0)[0]
    print(wr['d'])
    f = 'main'
    if not only_precompile:
        print(wr['c'], end='')
        ln = 1
        lines = r.splitlines(False)
        r = ''
        while True:
            if ln - 1 >= len(lines):
                break
            line = lines[ln - 1]
            if line.startswith('if_goto '):
                label, condition = line[9:].split(' ', 1)
                r += 'execute if %s run function %s:%s\n' % (condition,
                                                             project, label)
            elif line.startswith('unless_goto '):
                label, condition = line[12:].split(' ', 1)
                r += 'execute unless %s run function %s:%s\n' % (condition,
                                                                 project, label)
            elif line.startswith('goto '):
                label = line[5:]
                r += 'function %s:%s\n' % (project, label)
            elif line.startswith(':'):
                r += 'function %s:%s\n' % (project, line[1:])
                output(r, f)
                r = ''
                f = line[1:]
            else:
                r += line + '\n'
            ln += 1
        print(wr['d'])
    output(r, f)
    print(wr['w'], end='')
    flush()
    print(wr['d'])
    print(wr['a'])


def main():
    global w, wr, o, project
    try:
        option_raw, args = getopt.getopt(
            sys.argv[1:], 'ho:psn:te', [
                'help', 'output=', 'only-precompile', 'silent',
                'project-name=', 'Traditional-Chinese', 'English'
            ]
        )
        only_precompile = False
        for name, value in option_raw:
            if name in ('-h', '--help'):
                print(w['help'])
                exit(0)
            elif name in ('-o', '--output'):
                if value == '':
                    print(w['help'])
                    exit(0)
                o = value.replace('\\', '/')
                if o[-1] == '/':
                    o = o[:-1]
            elif name in ('-p', '--only-precompile'):
                only_precompile = True
            elif name in ('-s', '--silent'):
                wr = wr_s
            elif name in ('-n', '--project-name'):
                if value == '':
                    print(w['help'])
                    exit(0)
                project = value
            elif name in ('-t', '--Traditional-Chinese'):
                wr = wr_t
                w = w_t
            elif name in ('-e', '--English'):
                wr = wr_en
                w = w_en
        if len(args) != 1:
            print(w['help'])
            exit(0)

        print()
        print(w['cr'])
        print('v%s\n' % version)

        with open(args[0], 'r') as f:
            _compile(f.read(), only_precompile)

        exit(0)
    except getopt.GetoptError:
        print(w['help'])
        exit(0)
    except FileNotFoundError:
        print(
            '\n'
            '找不到源代码\n'
            'Source not found.\n'
        )
        exit(2)
    except MFPPSyntaxError as e:
        print(e)
        exit(1)
    except KeyboardInterrupt:
        print('Quit.')
        exit(0)
    except Exception as e:
        print(
            '\n'
            '出现一个致命错误:\n'
            'There is a fatal error:\n\n'
            '%s\n\n'
            '请到MCBBS(我的世界中文论坛)或Coding上反馈错误,感谢反馈!\n'
            'Please go to MCBBS or Coding to feedback,Thanks!\n'
            '链接:\n'
            'Links:\n'
            '    MCBBS:  %s\n'
            '    Coding: %s\n'
            % (e, '暂无 None', '暂无 None')
        )
        exit(0xffffffff)


if __name__ == '__main__':
    main()
